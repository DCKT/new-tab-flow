// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var BsChakra__Types$Ext = require("./BsChakra__Types.bs.js");

function makeProps(size, variantColor, width, height, icon) {
  var arg = BsChakra__Types$Ext.extractProps(width, (function (v) {
          return v;
        }));
  var arg$1 = BsChakra__Types$Ext.extractProps(height, (function (v) {
          return v;
        }));
  var arg$2 = Belt_Option.map(icon, (function (v) {
          switch (v.tag | 0) {
            case 0 : 
                return BsChakra__Types$Ext.iconToJs(v[0]);
            case 1 : 
            case 2 : 
                return v[0];
            
          }
        }));
  return (function (param, param$1, param$2, param$3, param$4, param$5, param$6) {
      var partial_arg = BsChakra__Types$Ext.extractProps(size, BsChakra__Types$Ext.buttonSizeToJs);
      var partial_arg$1 = BsChakra__Types$Ext.mapToVariantColor(variantColor);
      return (function (param$7, param$8) {
          var prim = partial_arg$1;
          var prim$1 = partial_arg;
          var prim$2 = param;
          var prim$3 = param$1;
          var prim$4 = param$2;
          var prim$5 = param$3;
          var prim$6 = param$4;
          var prim$7 = param$5;
          var prim$8 = param$6;
          var prim$9 = arg;
          var prim$10 = arg$1;
          var prim$11 = arg$2;
          var prim$12 = param$7;
          var tmp = { };
          if (prim !== undefined) {
            tmp.variantColor = Caml_option.valFromOption(prim);
          }
          if (prim$1 !== undefined) {
            tmp.size = Caml_option.valFromOption(prim$1);
          }
          if (prim$2 !== undefined) {
            tmp.variant = (function () {
                  switch (Caml_option.valFromOption(prim$2)) {
                    case 12956715 : 
                        return "solid";
                    case 324570959 : 
                        return "ghost";
                    case -507635838 : 
                        return "outline";
                    case -944564230 : 
                        return "link";
                    
                  }
                })();
          }
          if (prim$3 !== undefined) {
            tmp.type = (function () {
                  switch (Caml_option.valFromOption(prim$3)) {
                    case 436623384 : 
                        return "submit";
                    case -639606286 : 
                        return "button";
                    
                  }
                })();
          }
          if (prim$4 !== undefined) {
            tmp.isLoading = Caml_option.valFromOption(prim$4);
          }
          if (prim$5 !== undefined) {
            tmp.isDisabled = Caml_option.valFromOption(prim$5);
          }
          if (prim$6 !== undefined) {
            tmp.ariaLabel = Caml_option.valFromOption(prim$6);
          }
          if (prim$7 !== undefined) {
            tmp.isRound = Caml_option.valFromOption(prim$7);
          }
          if (prim$8 !== undefined) {
            tmp.onClick = Caml_option.valFromOption(prim$8);
          }
          if (prim$9 !== undefined) {
            tmp.width = Caml_option.valFromOption(prim$9);
          }
          if (prim$10 !== undefined) {
            tmp.height = Caml_option.valFromOption(prim$10);
          }
          if (prim$11 !== undefined) {
            tmp.icon = Caml_option.valFromOption(prim$11);
          }
          if (prim$12 !== undefined) {
            tmp.key = Caml_option.valFromOption(prim$12);
          }
          return tmp;
        });
    });
}

exports.makeProps = makeProps;
/* No side effect */
