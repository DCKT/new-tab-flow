// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var Core = require("@chakra-ui/core");

var ThemeProvider = /* module */[];

var CSSReset = /* module */[];

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -822828815,
    "bottom-right"
  ],
  /* tuple */[
    -445061397,
    "bottom"
  ],
  /* tuple */[
    -390002372,
    "top-left"
  ],
  /* tuple */[
    5793429,
    "top"
  ],
  /* tuple */[
    748121234,
    "bottom-left"
  ],
  /* tuple */[
    926161159,
    "top-right"
  ]
];

function positionToJs(param) {
  return Js_mapperRt.binarySearch(6, param, jsMapperConstantArray);
}

function positionFromJs(param) {
  return Js_mapperRt.revSearch(6, jsMapperConstantArray, param);
}

var jsMapperConstantArray$1 = /* array */[
  /* tuple */[
    -977586066,
    "info"
  ],
  /* tuple */[
    164354652,
    "warning"
  ],
  /* tuple */[
    512905955,
    "danger"
  ],
  /* tuple */[
    944645571,
    "success"
  ]
];

function statusToJs(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$1);
}

function statusFromJs(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$1, param);
}

var Toast = /* module */[
  /* positionToJs */positionToJs,
  /* positionFromJs */positionFromJs,
  /* statusToJs */statusToJs,
  /* statusFromJs */statusFromJs
];

function useToast(title, isClosable, description, duration, render, onClose, status, position, param) {
  var tmp = { };
  if (title !== undefined) {
    tmp.title = Caml_option.valFromOption(title);
  }
  if (description !== undefined) {
    tmp.description = Caml_option.valFromOption(description);
  }
  var tmp$1 = Belt_Option.map(status, (function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray$1);
        }));
  if (tmp$1 !== undefined) {
    tmp.status = Caml_option.valFromOption(tmp$1);
  }
  if (duration !== undefined) {
    tmp.duration = Caml_option.valFromOption(duration);
  }
  if (isClosable !== undefined) {
    tmp.isClosable = Caml_option.valFromOption(isClosable);
  }
  var tmp$2 = Belt_Option.map(position, (function (v) {
          return Js_mapperRt.binarySearch(6, v, jsMapperConstantArray);
        }));
  if (tmp$2 !== undefined) {
    tmp.position = Caml_option.valFromOption(tmp$2);
  }
  if (render !== undefined) {
    tmp.render = Caml_option.valFromOption(render);
  }
  if (onClose !== undefined) {
    tmp.onClose = Caml_option.valFromOption(onClose);
  }
  var partial_arg = tmp;
  return (function (param) {
      Core.useToast(partial_arg);
      return /* () */0;
    });
}

var Hooks = /* module */[
  /* Toast */Toast,
  /* useToast */useToast
];

var Accordion = 0;

var AccordionHeader = 0;

var AccordionItem = 0;

var AccordionPanel = 0;

var AccordionIcon = 0;

var Button = 0;

var ButtonGroup = 0;

var Switch = 0;

var Stack = 0;

var FormLabel = 0;

var Box = 0;

var CircularProgress = 0;

var CircularProgressLabel = 0;

var Heading = 0;

var Spinner = 0;

var Flex = 0;

var Input = 0;

var InputGroup = 0;

var InputLeftElement = 0;

var InputRightElement = 0;

var $$Text = 0;

var FormControl = 0;

var FormHelperText = 0;

var FormErrorMessage = 0;

var Alert = 0;

var AlertTitle = 0;

var AlertDescription = 0;

var AlertIcon = 0;

var Link = 0;

var Avatar = 0;

var AvatarBadge = 0;

var AvatarGroup = 0;

var NumberInput = 0;

var $$Image = 0;

var Types = 0;

var Modal = 0;

var ModalHeader = 0;

var ModalFooter = 0;

var ModalBody = 0;

var ModalContent = 0;

var ModalCloseButton = 0;

var ModalOverlay = 0;

var Icon = 0;

var IconButton = 0;

var Menu = 0;

var MenuItem = 0;

var MenuItemOption = 0;

var MenuGroup = 0;

var MenuOptionGroup = 0;

var MenuButton = 0;

var MenuList = 0;

var Textarea = 0;

var Select = 0;

var CloseButton = 0;

var AspectRatioBox = 0;

var PopoverArrow = 0;

var PopoverBody = 0;

var PopoverHeader = 0;

var PopoverCloseButton = 0;

var PopoverContent = 0;

var PopoverTrigger = 0;

var Popover = 0;

exports.ThemeProvider = ThemeProvider;
exports.CSSReset = CSSReset;
exports.Hooks = Hooks;
exports.Accordion = Accordion;
exports.AccordionHeader = AccordionHeader;
exports.AccordionItem = AccordionItem;
exports.AccordionPanel = AccordionPanel;
exports.AccordionIcon = AccordionIcon;
exports.Button = Button;
exports.ButtonGroup = ButtonGroup;
exports.Switch = Switch;
exports.Stack = Stack;
exports.FormLabel = FormLabel;
exports.Box = Box;
exports.CircularProgress = CircularProgress;
exports.CircularProgressLabel = CircularProgressLabel;
exports.Heading = Heading;
exports.Spinner = Spinner;
exports.Flex = Flex;
exports.Input = Input;
exports.InputGroup = InputGroup;
exports.InputLeftElement = InputLeftElement;
exports.InputRightElement = InputRightElement;
exports.$$Text = $$Text;
exports.FormControl = FormControl;
exports.FormHelperText = FormHelperText;
exports.FormErrorMessage = FormErrorMessage;
exports.Alert = Alert;
exports.AlertTitle = AlertTitle;
exports.AlertDescription = AlertDescription;
exports.AlertIcon = AlertIcon;
exports.Link = Link;
exports.Avatar = Avatar;
exports.AvatarBadge = AvatarBadge;
exports.AvatarGroup = AvatarGroup;
exports.NumberInput = NumberInput;
exports.$$Image = $$Image;
exports.Types = Types;
exports.Modal = Modal;
exports.ModalHeader = ModalHeader;
exports.ModalFooter = ModalFooter;
exports.ModalBody = ModalBody;
exports.ModalContent = ModalContent;
exports.ModalCloseButton = ModalCloseButton;
exports.ModalOverlay = ModalOverlay;
exports.Icon = Icon;
exports.IconButton = IconButton;
exports.Menu = Menu;
exports.MenuItem = MenuItem;
exports.MenuItemOption = MenuItemOption;
exports.MenuGroup = MenuGroup;
exports.MenuOptionGroup = MenuOptionGroup;
exports.MenuButton = MenuButton;
exports.MenuList = MenuList;
exports.Textarea = Textarea;
exports.Select = Select;
exports.CloseButton = CloseButton;
exports.AspectRatioBox = AspectRatioBox;
exports.PopoverArrow = PopoverArrow;
exports.PopoverBody = PopoverBody;
exports.PopoverHeader = PopoverHeader;
exports.PopoverCloseButton = PopoverCloseButton;
exports.PopoverContent = PopoverContent;
exports.PopoverTrigger = PopoverTrigger;
exports.Popover = Popover;
/* @chakra-ui/core Not a pure module */
