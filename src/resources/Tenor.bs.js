// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Decco = require("@ryb73/decco/src/Decco.js");
var Axios = require("axios");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

var key = "5281M2M5N4WP";

var baseURL = "https://api.tenor.com/v1/search";

function media_encode(v) {
  return Js_dict.fromArray(/* array */[
              /* tuple */[
                "url",
                Decco.stringToJson(v[/* url */0])
              ],
              /* tuple */[
                "dims",
                Decco.arrayToJson(Decco.intToJson, v[/* dims */1])
              ],
              /* tuple */[
                "preview",
                Decco.stringToJson(v[/* preview */2])
              ],
              /* tuple */[
                "size",
                Decco.intToJson(v[/* size */3])
              ]
            ]);
}

function media_decode(v) {
  var match = Js_json.classify(v);
  if (typeof match === "number" || match.tag !== 2) {
    return Decco.error(undefined, "Not an object", v);
  } else {
    var dict = match[0];
    var match$1 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "url"), null));
    if (match$1.tag) {
      var e = match$1[0];
      return /* Error */Block.__(1, [/* record */[
                  /* path */".url" + e[/* path */0],
                  /* message */e[/* message */1],
                  /* value */e[/* value */2]
                ]]);
    } else {
      var match$2 = Decco.arrayFromJson(Decco.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict, "dims"), null));
      if (match$2.tag) {
        var e$1 = match$2[0];
        return /* Error */Block.__(1, [/* record */[
                    /* path */".dims" + e$1[/* path */0],
                    /* message */e$1[/* message */1],
                    /* value */e$1[/* value */2]
                  ]]);
      } else {
        var match$3 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "preview"), null));
        if (match$3.tag) {
          var e$2 = match$3[0];
          return /* Error */Block.__(1, [/* record */[
                      /* path */".preview" + e$2[/* path */0],
                      /* message */e$2[/* message */1],
                      /* value */e$2[/* value */2]
                    ]]);
        } else {
          var match$4 = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "size"), null));
          if (match$4.tag) {
            var e$3 = match$4[0];
            return /* Error */Block.__(1, [/* record */[
                        /* path */".size" + e$3[/* path */0],
                        /* message */e$3[/* message */1],
                        /* value */e$3[/* value */2]
                      ]]);
          } else {
            return /* Ok */Block.__(0, [/* record */[
                        /* url */match$1[0],
                        /* dims */match$2[0],
                        /* preview */match$3[0],
                        /* size */match$4[0]
                      ]]);
          }
        }
      }
    }
  }
}

function medias_encode(v) {
  return Js_dict.fromArray(/* array */[
              /* tuple */[
                "gif",
                media_encode(v[/* gif */0])
              ],
              /* tuple */[
                "mp4",
                media_encode(v[/* mp4 */1])
              ]
            ]);
}

function medias_decode(v) {
  var match = Js_json.classify(v);
  if (typeof match === "number" || match.tag !== 2) {
    return Decco.error(undefined, "Not an object", v);
  } else {
    var dict = match[0];
    var match$1 = media_decode(Belt_Option.getWithDefault(Js_dict.get(dict, "gif"), null));
    if (match$1.tag) {
      var e = match$1[0];
      return /* Error */Block.__(1, [/* record */[
                  /* path */".gif" + e[/* path */0],
                  /* message */e[/* message */1],
                  /* value */e[/* value */2]
                ]]);
    } else {
      var match$2 = media_decode(Belt_Option.getWithDefault(Js_dict.get(dict, "mp4"), null));
      if (match$2.tag) {
        var e$1 = match$2[0];
        return /* Error */Block.__(1, [/* record */[
                    /* path */".mp4" + e$1[/* path */0],
                    /* message */e$1[/* message */1],
                    /* value */e$1[/* value */2]
                  ]]);
      } else {
        return /* Ok */Block.__(0, [/* record */[
                    /* gif */match$1[0],
                    /* mp4 */match$2[0]
                  ]]);
      }
    }
  }
}

function result_encode(v) {
  return Js_dict.fromArray(/* array */[
              /* tuple */[
                "tags",
                Decco.arrayToJson(Decco.stringToJson, v[/* tags */0])
              ],
              /* tuple */[
                "url",
                Decco.stringToJson(v[/* url */1])
              ],
              /* tuple */[
                "media",
                Decco.arrayToJson(medias_encode, v[/* media */2])
              ],
              /* tuple */[
                "id",
                Decco.stringToJson(v[/* id */3])
              ]
            ]);
}

function result_decode(v) {
  var match = Js_json.classify(v);
  if (typeof match === "number" || match.tag !== 2) {
    return Decco.error(undefined, "Not an object", v);
  } else {
    var dict = match[0];
    var match$1 = Decco.arrayFromJson(Decco.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict, "tags"), null));
    if (match$1.tag) {
      var e = match$1[0];
      return /* Error */Block.__(1, [/* record */[
                  /* path */".tags" + e[/* path */0],
                  /* message */e[/* message */1],
                  /* value */e[/* value */2]
                ]]);
    } else {
      var match$2 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "url"), null));
      if (match$2.tag) {
        var e$1 = match$2[0];
        return /* Error */Block.__(1, [/* record */[
                    /* path */".url" + e$1[/* path */0],
                    /* message */e$1[/* message */1],
                    /* value */e$1[/* value */2]
                  ]]);
      } else {
        var match$3 = Decco.arrayFromJson(medias_decode, Belt_Option.getWithDefault(Js_dict.get(dict, "media"), null));
        if (match$3.tag) {
          var e$2 = match$3[0];
          return /* Error */Block.__(1, [/* record */[
                      /* path */".media" + e$2[/* path */0],
                      /* message */e$2[/* message */1],
                      /* value */e$2[/* value */2]
                    ]]);
        } else {
          var match$4 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "id"), null));
          if (match$4.tag) {
            var e$3 = match$4[0];
            return /* Error */Block.__(1, [/* record */[
                        /* path */".id" + e$3[/* path */0],
                        /* message */e$3[/* message */1],
                        /* value */e$3[/* value */2]
                      ]]);
          } else {
            return /* Ok */Block.__(0, [/* record */[
                        /* tags */match$1[0],
                        /* url */match$2[0],
                        /* media */match$3[0],
                        /* id */match$4[0]
                      ]]);
          }
        }
      }
    }
  }
}

function resource_encode(v) {
  return Js_dict.fromArray(/* array */[
              /* tuple */[
                "weburl",
                Decco.stringToJson(v[/* weburl */0])
              ],
              /* tuple */[
                "results",
                Decco.arrayToJson(result_encode, v[/* results */1])
              ]
            ]);
}

function resource_decode(v) {
  var match = Js_json.classify(v);
  if (typeof match === "number" || match.tag !== 2) {
    return Decco.error(undefined, "Not an object", v);
  } else {
    var dict = match[0];
    var match$1 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "weburl"), null));
    if (match$1.tag) {
      var e = match$1[0];
      return /* Error */Block.__(1, [/* record */[
                  /* path */".weburl" + e[/* path */0],
                  /* message */e[/* message */1],
                  /* value */e[/* value */2]
                ]]);
    } else {
      var match$2 = Decco.arrayFromJson(result_decode, Belt_Option.getWithDefault(Js_dict.get(dict, "results"), null));
      if (match$2.tag) {
        var e$1 = match$2[0];
        return /* Error */Block.__(1, [/* record */[
                    /* path */".results" + e$1[/* path */0],
                    /* message */e$1[/* message */1],
                    /* value */e$1[/* value */2]
                  ]]);
      } else {
        return /* Ok */Block.__(0, [/* record */[
                    /* weburl */match$1[0],
                    /* results */match$2[0]
                  ]]);
      }
    }
  }
}

function search(keywords, $staropt$star, param) {
  var limit = $staropt$star !== undefined ? $staropt$star : 5;
  return Axios.get(baseURL + ("?query=" + (String(keywords) + ("&key=" + (String(key) + ("&limit=" + (String(limit) + ""))))))).then((function (res) {
                  return Promise.resolve(res.data);
                })).then((function (data) {
                var match = resource_decode(data);
                if (match.tag) {
                  console.log(match[0]);
                  return Promise.reject(Js_exn.raiseError("api decode error"));
                } else {
                  return Promise.resolve(match[0]);
                }
              }));
}

exports.key = key;
exports.baseURL = baseURL;
exports.media_encode = media_encode;
exports.media_decode = media_decode;
exports.medias_encode = medias_encode;
exports.medias_decode = medias_decode;
exports.result_encode = result_encode;
exports.result_decode = result_decode;
exports.resource_encode = resource_encode;
exports.resource_decode = resource_decode;
exports.search = search;
/* axios Not a pure module */
